import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface Insight {
  id: string;
  artwork: string;
  emotion: string;
  note: string;
  timestamp: Date;
  colorPalette: string[];
}

interface Exhibition {
  id: string;
  name: string;
  venue: string;
  date: Date;
  insights: Insight[];
}

const emotions: Record<string, { emoji: string; name: string }> = {
  joy: { emoji: '😊', name: '기쁨' },
  awe: { emoji: '😮', name: '경외' },
  peace: { emoji: '😌', name: '평온' },
  curiosity: { emoji: '🤔', name: '호기심' },
  nostalgia: { emoji: '🥺', name: '그리움' },
  inspiration: { emoji: '✨', name: '영감' },
  melancholy: { emoji: '😔', name: '우울' },
  confusion: { emoji: '😵', name: '혼란' }
};

export const exportExhibitionToPDF = async (exhibition: Exhibition, language: 'ko' | 'en' = 'ko') => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  let yPosition = margin;

  // Custom font for Korean support - using default font with Unicode support
  pdf.setFont('helvetica');

  // Title
  pdf.setFontSize(24);
  pdf.setTextColor(147, 51, 234); // Purple color
  pdf.text(exhibition.name, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Venue and Date
  pdf.setFontSize(14);
  pdf.setTextColor(100, 100, 100);
  pdf.text(exhibition.venue, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 8;
  pdf.text(new Date(exhibition.date).toLocaleDateString(language === 'ko' ? 'ko-KR' : 'en-US'), pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 20;

  // Insights
  pdf.setTextColor(0, 0, 0);
  exhibition.insights.forEach((insight, index) => {
    // Check if we need a new page
    if (yPosition > pageHeight - 40) {
      pdf.addPage();
      yPosition = margin;
    }

    // Insight number and artwork
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text(`${index + 1}. ${insight.artwork}`, margin, yPosition);
    yPosition += 10;

    // Emotion
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    const emotion = emotions[insight.emotion];
    pdf.text(`${language === 'ko' ? '감정' : 'Emotion'}: ${emotion?.name || insight.emotion}`, margin + 5, yPosition);
    yPosition += 8;

    // Note
    const lines = pdf.splitTextToSize(insight.note, pageWidth - 2 * margin - 10);
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = margin;
      }
      pdf.text(line, margin + 5, yPosition);
      yPosition += 6;
    });

    // Timestamp
    pdf.setFontSize(10);
    pdf.setTextColor(150, 150, 150);
    pdf.text(
      new Date(insight.timestamp).toLocaleString(language === 'ko' ? 'ko-KR' : 'en-US'),
      margin + 5,
      yPosition
    );
    pdf.setTextColor(0, 0, 0);
    yPosition += 15;
  });

  // Footer
  pdf.setFontSize(10);
  pdf.setTextColor(147, 51, 234);
  pdf.text('Generated by SAYU Archive', pageWidth / 2, pageHeight - 10, { align: 'center' });

  // Save the PDF
  pdf.save(`${exhibition.name.replace(/[^a-z0-9가-힣]/gi, '_')}_archive.pdf`);
};

export const exportAllExhibitionsToPDF = async (language: 'ko' | 'en' = 'ko') => {
  const saved = localStorage.getItem('exhibitions');
  if (!saved) {
    alert(language === 'ko' ? '저장된 전시가 없습니다.' : 'No saved exhibitions.');
    return;
  }

  const exhibitions: Exhibition[] = JSON.parse(saved).map((ex: any) => ({
    ...ex,
    date: new Date(ex.date),
    insights: ex.insights.map((ins: any) => ({
      ...ins,
      timestamp: new Date(ins.timestamp)
    }))
  }));

  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;

  // Cover page
  pdf.setFontSize(32);
  pdf.setTextColor(147, 51, 234);
  pdf.text(language === 'ko' ? '나의 전시 아카이브' : 'My Exhibition Archive', pageWidth / 2, pageHeight / 2 - 20, { align: 'center' });
  
  pdf.setFontSize(16);
  pdf.setTextColor(100, 100, 100);
  pdf.text(new Date().toLocaleDateString(language === 'ko' ? 'ko-KR' : 'en-US'), pageWidth / 2, pageHeight / 2, { align: 'center' });
  
  pdf.setFontSize(14);
  pdf.text(`${language === 'ko' ? '총' : 'Total'} ${exhibitions.length} ${language === 'ko' ? '개의 전시' : 'exhibitions'}`, pageWidth / 2, pageHeight / 2 + 20, { align: 'center' });

  // Each exhibition
  exhibitions.forEach((exhibition, exIndex) => {
    pdf.addPage();
    let yPosition = margin;

    // Exhibition title
    pdf.setFontSize(24);
    pdf.setTextColor(147, 51, 234);
    pdf.text(exhibition.name, pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 15;

    // Venue and Date
    pdf.setFontSize(14);
    pdf.setTextColor(100, 100, 100);
    pdf.text(exhibition.venue, pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 8;
    pdf.text(new Date(exhibition.date).toLocaleDateString(language === 'ko' ? 'ko-KR' : 'en-US'), pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 20;

    // Insights
    pdf.setTextColor(0, 0, 0);
    exhibition.insights.forEach((insight, index) => {
      if (yPosition > pageHeight - 40) {
        pdf.addPage();
        yPosition = margin;
      }

      // Insight details
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`${insight.artwork}`, margin, yPosition);
      yPosition += 8;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      const emotion = emotions[insight.emotion];
      pdf.text(`${emotion?.name || insight.emotion}`, margin + 5, yPosition);
      yPosition += 7;

      const lines = pdf.splitTextToSize(insight.note, pageWidth - 2 * margin - 10);
      lines.forEach((line: string) => {
        if (yPosition > pageHeight - 20) {
          pdf.addPage();
          yPosition = margin;
        }
        pdf.text(line, margin + 5, yPosition);
        yPosition += 5;
      });

      yPosition += 10;
    });
  });

  // Statistics page
  pdf.addPage();
  let yPosition = margin;
  
  pdf.setFontSize(24);
  pdf.setTextColor(147, 51, 234);
  pdf.text(language === 'ko' ? '통계 요약' : 'Statistics Summary', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 20;

  // Calculate statistics
  const totalInsights = exhibitions.reduce((sum, ex) => sum + ex.insights.length, 0);
  const emotionCounts: Record<string, number> = {};
  exhibitions.forEach(ex => {
    ex.insights.forEach(ins => {
      emotionCounts[ins.emotion] = (emotionCounts[ins.emotion] || 0) + 1;
    });
  });

  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`${language === 'ko' ? '총 전시 수' : 'Total Exhibitions'}: ${exhibitions.length}`, margin, yPosition);
  yPosition += 10;
  pdf.text(`${language === 'ko' ? '총 인사이트' : 'Total Insights'}: ${totalInsights}`, margin, yPosition);
  yPosition += 10;
  pdf.text(`${language === 'ko' ? '평균 인사이트' : 'Average Insights'}: ${(totalInsights / exhibitions.length).toFixed(1)}`, margin, yPosition);
  yPosition += 15;

  // Emotion distribution
  pdf.text(language === 'ko' ? '감정 분포:' : 'Emotion Distribution:', margin, yPosition);
  yPosition += 10;

  Object.entries(emotionCounts)
    .sort(([, a], [, b]) => b - a)
    .forEach(([emotionId, count]) => {
      const emotion = emotions[emotionId];
      pdf.text(`  ${emotion?.name || emotionId}: ${count}`, margin, yPosition);
      yPosition += 8;
    });

  // Footer
  pdf.setFontSize(10);
  pdf.setTextColor(147, 51, 234);
  pdf.text('Generated by SAYU Archive', pageWidth / 2, pageHeight - 10, { align: 'center' });

  // Save the PDF
  pdf.save(`SAYU_Exhibition_Archive_${new Date().toISOString().split('T')[0]}.pdf`);
};