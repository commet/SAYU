import { createRequire } from 'module';
const require = createRequire(import.meta.url);

import dotenv from 'dotenv';
import pkg from 'pg';
const { Pool } = pkg;

dotenv.config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function checkWikipediaContent() {
  try {
    console.log('üîç Wikipedia ÏΩòÌÖêÏ∏† ÏÉÅÏÑ∏ Î∂ÑÏÑù\n');

    // 1. sourcesÏóê wikipediaÍ∞Ä Ìè¨Ìï®Îêú ÏïÑÌã∞Ïä§Ìä∏Îì§Ïùò bio ÎÇ¥Ïö© ÌôïÏù∏
    console.log('1Ô∏è‚É£ Wikipedia ÏÜåÏä§Í∞Ä ÌëúÏãúÎêú ÏïÑÌã∞Ïä§Ìä∏Ïùò bio ÎÇ¥Ïö©:');
    const wikiSourceQuery = `
      SELECT 
        name,
        name_ko,
        sources,
        SUBSTRING(bio, 1, 200) || '...' as bio_preview,
        LENGTH(bio) as bio_length
      FROM artists
      WHERE sources::text ILIKE '%wiki%'
      ORDER BY bio_length DESC
      LIMIT 10;
    `;
    const wikiSourceResult = await pool.query(wikiSourceQuery);
    
    wikiSourceResult.rows.forEach((artist, index) => {
      console.log(`\n${index + 1}. ${artist.name}`);
      console.log(`   Sources: ${artist.sources}`);
      console.log(`   Bio Í∏∏Ïù¥: ${artist.bio_length}Ïûê`);
      console.log(`   Bio ÎÇ¥Ïö©:\n   ${artist.bio_preview}`);
    });

    // 2. Í∏¥ bioÎ•º Í∞ÄÏßÑ ÏïÑÌã∞Ïä§Ìä∏ (WikipediaÏùº Í∞ÄÎä•ÏÑ± ÎÜíÏùå)
    console.log('\n\n2Ô∏è‚É£ Í∏¥ bioÎ•º Í∞ÄÏßÑ ÏïÑÌã∞Ïä§Ìä∏ (ÏÉÅÏúÑ 10Î™Ö):');
    const longBioQuery = `
      SELECT 
        name,
        nationality,
        sources,
        LENGTH(bio) as bio_length,
        SUBSTRING(bio, 1, 300) || '...' as bio_preview
      FROM artists
      WHERE bio IS NOT NULL
      ORDER BY bio_length DESC
      LIMIT 10;
    `;
    const longBioResult = await pool.query(longBioQuery);
    
    console.table(longBioResult.rows.map(row => ({
      name: row.name,
      nationality: row.nationality,
      bio_length: row.bio_length,
      has_wiki_source: row.sources?.toString().includes('wiki') ? 'Yes' : 'No'
    })));

    // 3. bio_ko ÎÇ¥Ïö© Î∂ÑÏÑù
    console.log('\n3Ô∏è‚É£ ÌïúÍ∏Ä bio ÎÇ¥Ïö© Ìå®ÌÑ¥ Î∂ÑÏÑù:');
    const koBioQuery = `
      SELECT 
        bio_ko,
        COUNT(*) as count
      FROM artists
      WHERE bio_ko IS NOT NULL
      GROUP BY bio_ko
      ORDER BY count DESC
      LIMIT 5;
    `;
    const koBioResult = await pool.query(koBioQuery);
    
    console.log('Í∞ÄÏû• ÎßéÏù¥ Î∞òÎ≥µÎêòÎäî ÌïúÍ∏Ä bio:');
    koBioResult.rows.forEach((row, index) => {
      console.log(`${index + 1}. "${row.bio_ko}" (${row.count}Í±¥)`);
    });

    // 4. Wikipedia Ìå®ÌÑ¥ ÏÉÅÏÑ∏ Î∂ÑÏÑù
    console.log('\n4Ô∏è‚É£ Wikipedia ÌäπÏßïÏ†Å Ìå®ÌÑ¥ Î∂ÑÏÑù:');
    const patternQuery = `
      SELECT 
        COUNT(CASE WHEN bio LIKE '%(born%' THEN 1 END) as has_birth_info,
        COUNT(CASE WHEN bio LIKE '%died%' OR bio LIKE '%death%' THEN 1 END) as has_death_info,
        COUNT(CASE WHEN bio LIKE '%[%]%' THEN 1 END) as has_brackets,
        COUNT(CASE WHEN bio LIKE '%citation needed%' THEN 1 END) as has_citation,
        COUNT(CASE WHEN bio ~ '[0-9]{4}' THEN 1 END) as has_year,
        COUNT(CASE WHEN bio LIKE '%is a%' OR bio LIKE '%was a%' THEN 1 END) as has_definition,
        COUNT(CASE WHEN LENGTH(bio) > 500 THEN 1 END) as long_bio,
        COUNT(CASE WHEN LENGTH(bio) > 1000 THEN 1 END) as very_long_bio
      FROM artists
      WHERE bio IS NOT NULL;
    `;
    const patternResult = await pool.query(patternQuery);
    
    console.table(patternResult.rows[0]);

    // 5. Ïã§Ï†ú Wikipedia ÎÇ¥Ïö©Ïù∏ÏßÄ ÌôïÏù∏Ìï† Ïàò ÏûàÎäî ÏÉòÌîå
    console.log('\n5Ô∏è‚É£ Wikipedia Ïä§ÌÉÄÏùº bio ÏÉòÌîå (3Í∞ú):');
    const wikiStyleQuery = `
      SELECT 
        name,
        nationality,
        birth_year,
        death_year,
        bio
      FROM artists
      WHERE LENGTH(bio) > 1000
        AND bio LIKE '%born%'
        AND bio ~ '[0-9]{4}'
      ORDER BY LENGTH(bio) DESC
      LIMIT 3;
    `;
    const wikiStyleResult = await pool.query(wikiStyleQuery);
    
    wikiStyleResult.rows.forEach((artist, index) => {
      console.log(`\n--- ${index + 1}. ${artist.name} (${artist.nationality}, ${artist.birth_year}-${artist.death_year || 'present'}) ---`);
      console.log(artist.bio.substring(0, 500) + '...\n');
    });

    // 6. ÏßßÏùÄ bio vs Í∏¥ bio ÎπÑÏú®
    console.log('6Ô∏è‚É£ Bio Í∏∏Ïù¥ Î∂ÑÌè¨:');
    const lengthDistQuery = `
      SELECT 
        CASE 
          WHEN LENGTH(bio) < 50 THEN 'Very Short (<50)'
          WHEN LENGTH(bio) < 100 THEN 'Short (50-100)'
          WHEN LENGTH(bio) < 500 THEN 'Medium (100-500)'
          WHEN LENGTH(bio) < 1000 THEN 'Long (500-1000)'
          ELSE 'Very Long (>1000)'
        END as length_category,
        COUNT(*) as count,
        ROUND(COUNT(*)::numeric / (SELECT COUNT(*) FROM artists WHERE bio IS NOT NULL)::numeric * 100, 2) as percentage
      FROM artists
      WHERE bio IS NOT NULL
      GROUP BY length_category
      ORDER BY 
        CASE length_category
          WHEN 'Very Short (<50)' THEN 1
          WHEN 'Short (50-100)' THEN 2
          WHEN 'Medium (100-500)' THEN 3
          WHEN 'Long (500-1000)' THEN 4
          WHEN 'Very Long (>1000)' THEN 5
        END;
    `;
    const lengthDistResult = await pool.query(lengthDistQuery);
    
    console.table(lengthDistResult.rows);

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
  } finally {
    await pool.end();
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
checkWikipediaContent();