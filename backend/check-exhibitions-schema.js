/**
 * exhibitions ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
 */

const { pool } = require('./src/config/database');

async function checkExhibitionsSchema() {
  try {
    console.log('üìã exhibitions ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏...\n');

    // ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
    const schemaQuery = `
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'exhibitions' 
      ORDER BY ordinal_position;
    `;
    
    const schema = await pool.query(schemaQuery);
    
    console.log('=== EXHIBITIONS ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ===');
    schema.rows.forEach(row => {
      const nullable = row.is_nullable === 'YES' ? 'NULL Í∞ÄÎä•' : 'ÌïÑÏàò';
      const defaultVal = row.column_default ? ` (Í∏∞Î≥∏Í∞í: ${row.column_default})` : '';
      console.log(`  ${row.column_name}: ${row.data_type} (${nullable})${defaultVal}`);
    });

    // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    console.log('\n=== ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ (ÏµúÍ∑º 5Í∞ú) ===');
    const sampleQuery = `
      SELECT id, title, venue_name, start_date, end_date, city, country, source
      FROM exhibitions 
      ORDER BY created_at DESC 
      LIMIT 5;
    `;
    
    const samples = await pool.query(sampleQuery);
    samples.rows.forEach((row, i) => {
      console.log(`${i + 1}. ${row.title}`);
      console.log(`   Ïû•ÏÜå: ${row.venue_name}`);
      console.log(`   ÏúÑÏπò: ${row.city}, ${row.country}`);
      console.log(`   Í∏∞Í∞Ñ: ${row.start_date} ~ ${row.end_date}`);
      console.log(`   Ï∂úÏ≤ò: ${row.source}`);
      console.log('');
    });

    // Ï∂úÏ≤òÎ≥Ñ ÌÜµÍ≥Ñ
    console.log('=== Ï∂úÏ≤òÎ≥Ñ Ï†ÑÏãú Ïàò ===');
    const sourceQuery = `
      SELECT source, COUNT(*) as count 
      FROM exhibitions 
      GROUP BY source 
      ORDER BY count DESC;
    `;
    
    const sources = await pool.query(sourceQuery);
    sources.rows.forEach(row => {
      console.log(`  ${row.source}: ${row.count}Í∞ú`);
    });

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error.message);
  } finally {
    if (pool && pool.end) {
      await pool.end();
    }
  }
}

if (require.main === module) {
  checkExhibitionsSchema();
}

module.exports = checkExhibitionsSchema;