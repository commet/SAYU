const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function fixAPTProfiles() {
  console.log('üîß Fixing APT Profile format issues...\n');
  
  // Check existing APT structure first
  const existingResult = await pool.query(`
    SELECT name, apt_profile 
    FROM artists 
    WHERE apt_profile IS NOT NULL 
    LIMIT 1
  `);
  
  if (existingResult.rows.length > 0) {
    console.log('‚úÖ Existing APT Profile format:');
    console.log(JSON.stringify(existingResult.rows[0].apt_profile, null, 2));
    console.log('\n');
  }

  // Fixed APT profiles with correct structure
  const fixedProfiles = {
    "South German; Augsburg": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["ÏßÄÏó≠Í≥µÏòà", "Ï†ÑÌÜµÏ†Å", "Ï¢ÖÍµêÏ†Å", "Ïû•Ïù∏Ï†ïÏã†"],
        "reasoning": ["ÏßÄÏó≠ Ï†ÑÌÜµÏùÑ Ï§ëÏãúÌïòÎäî Î≥¥ÏàòÏ†Å Ïû•Ïù∏. Í≥µÎèôÏ≤¥ ÎÇ¥ÏóêÏÑú Ïù∏Ï†ïÎ∞õÎäî ÏïàÏ†ïÏ†Å ÏûëÏóÖÏùÑ ÏÑ†Ìò∏ÌïòÎ©∞, Ï¢ÖÍµêÏ†Å Í∞ÄÏπòÏôÄ Ï†ÑÌÜµ Í∏∞Î≤ïÏùÑ Ï≤†Ï†ÄÌûà Îî∞Î•¥Îäî ÏÑ±Í≤©."],
        "confidence": 0.75
      },
      "dimensions": {
        "A": 30, "C": 70, "E": 40, "F": 35, "L": 25, "M": 60, "R": 75, "S": 60
      },
      "primary_types": [
        {"type": "SRMC", "weight": 0.7},
        {"type": "SRMF", "weight": 0.3}
      ]
    },
    
    "After Raffaello Sanzio, called Raphael": {
      "meta": {
        "source": "comprehensive_analysis_batch2", 
        "keywords": ["Î™®Î∞©", "Ï†ÑÌÜµÍ≥ÑÏäπ", "Í≥†Ï†ÑÏ†Å", "Ïù¥ÏÉÅÎØ∏"],
        "reasoning": ["ÏôÑÎ≤ΩÏ£ºÏùòÏ†Å ÏÑ±Ìñ•ÏúºÎ°ú ÎåÄÍ∞ÄÏùò ÏñëÏãùÏùÑ Ï≤†Ï†ÄÌûà Ïó∞Íµ¨ÌïòÍ≥† Î™®Î∞©ÌïòÎäî Ïû•Ïù∏ Ï†ïÏã†. Ï∞ΩÏùòÏÑ±Î≥¥Îã§Îäî Í∏∞Ï°¥ Ï†ÑÌÜµÏùò ÏôÑÎ≤ΩÌïú Ïû¨ÌòÑÏùÑ Ï∂îÍµ¨ÌïòÎäî Î≥¥ÏàòÏ†Å ÏÑ±Í≤©."],
        "confidence": 0.85
      },
      "dimensions": {
        "A": 15, "C": 85, "E": 25, "F": 20, "L": 30, "M": 70, "R": 80, "S": 40
      },
      "primary_types": [
        {"type": "LRMC", "weight": 0.8},
        {"type": "SRMC", "weight": 0.2}
      ]
    },
    
    "Alessandro Longhi": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["Ï¥àÏÉÅÌôî", "Î≤†ÎÑ§ÏπòÏïÑ", "ÏÇ¨ÍµêÍ≥Ñ", "Ïö∞ÏïÑÌï®"],
        "reasoning": ["ÏÇ¨ÍµêÏ†ÅÏù¥Í≥† Í¥ÄÏ∞∞Î†•Ïù¥ Îõ∞Ïñ¥ÎÇú ÏÑ±Í≤©. Ïù∏Í∞ÑÍ¥ÄÍ≥ÑÎ•º Ï§ëÏãúÌïòÎ©∞ ÌÉÄÏù∏Ïùò ÎÇ¥Î©¥ÏùÑ ÌååÏïÖÌïòÎäî Îä•Î†•Ïù¥ ÌÉÅÏõî. ÏÇ¨ÌöåÏ†Å ÏÑ±Í≥µÏùÑ Ï∂îÍµ¨ÌïòÎ©¥ÏÑúÎèÑ ÏòàÏà†Ï†Å ÏôÑÏÑ±ÎèÑÎ•º ÎÜìÏπòÏßÄ ÏïäÎäî Í∑†Ìòï Í∞êÍ∞Å."],
        "confidence": 0.8
      },
      "dimensions": {
        "A": 45, "C": 60, "E": 70, "F": 55, "L": 40, "M": 65, "R": 60, "S": 75
      },
      "primary_types": [
        {"type": "SAMC", "weight": 0.6},
        {"type": "SRMF", "weight": 0.4}
      ]
    },
    
    "Rosalba Carriera": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["ÌååÏä§ÌÖî", "ÏÑ¨ÏÑ∏Ìï®", "Ïö∞ÏïÑÌï®", "Ïó¨ÏÑ±ÌôîÍ∞Ä"],
        "reasoning": ["ÏÑ¨ÏÑ∏ÌïòÍ≥† Í∞êÏÑ±Ï†ÅÏù¥Î©¥ÏÑúÎèÑ Í∞ïÏù∏Ìïú ÏùòÏßÄÎ•º Í∞ÄÏßÑ ÌòÅÏã†Í∞Ä. ÎÇ®ÏÑ± Ï§ëÏã¨ ÏÇ¨ÌöåÏóêÏÑú ÎèÖÏûêÏ†Å ÏòàÏà† ÏÑ∏Í≥ÑÎ•º Íµ¨Ï∂ïÌïú Í∞úÏ≤ôÏûê Ï†ïÏã†. ÏÉâÏ±ÑÏôÄ ÏßàÍ∞êÏóê ÎåÄÌïú ÌÉÅÏõîÌïú Í∞êÍ∞ÅÏùÑ Î≥¥Ïú†."],
        "confidence": 0.85
      },
      "dimensions": {
        "A": 60, "C": 55, "E": 65, "F": 75, "L": 55, "M": 80, "R": 45, "S": 35
      },
      "primary_types": [
        {"type": "LAMF", "weight": 0.7},
        {"type": "SAMF", "weight": 0.3}
      ]
    },
    
    "Gerard van Groeningen": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["ÌîåÎûëÎìúÎ•¥", "ÏÑ∏Î∞ÄÌôî", "Ï†ïÍµêÌï®", "Î∂ÅÏú†ÎüΩ"],
        "reasoning": ["Í∑πÎèÑÎ°ú ÍººÍººÌïòÍ≥† Ïù∏ÎÇ¥Ïã¨Ïù¥ Í∞ïÌïú ÏôÑÎ≤ΩÏ£ºÏùòÏûê. ÏÑ∏Î∂Ä ÏÇ¨Ìï≠Ïóê ÎåÄÌïú ÏßëÏ∞©Í≥º Ï†ïÌôïÏÑ±ÏùÑ Ï∂îÍµ¨ÌïòÎäî ÏÑ±Í≤©. Ï†ÑÌÜµÏ†Å Í∞ÄÏπòÎ•º Ï§ëÏãúÌïòÎ©¥ÏÑúÎèÑ Í∏∞Ïà†Ï†Å ÌòÅÏã†ÏùÑ Ï∂îÍµ¨ÌïòÎäî Ïû•Ïù∏ Ï†ïÏã†."],
        "confidence": 0.8
      },
      "dimensions": {
        "A": 25, "C": 80, "E": 30, "F": 40, "L": 45, "M": 75, "R": 70, "S": 50
      },
      "primary_types": [
        {"type": "LRMC", "weight": 0.6},
        {"type": "SRMC", "weight": 0.4}
      ]
    },
    
    "Apollonio di Giovanni": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["Ïπ¥ÏãúÎÖ∏Îãà", "ÏÑúÏÇ¨Ìôî", "ÌîåÎ°úÎ†åÏä§", "Í≥µÎ∞©"],
        "reasoning": ["Ïù¥ÏïºÍ∏∞Íæº Í∏∞ÏßàÏùÑ Í∞ÄÏßÑ ÏÉÅÏÉÅÎ†• ÌíçÎ∂ÄÌïú ÏòàÏà†Í∞Ä. Í≥†Ï†Ñ Î¨∏ÌïôÏóê ÎåÄÌïú ÍπäÏùÄ Ïï†Ï†ïÍ≥º ÏÑúÏÇ¨Ï†Å Íµ¨ÏÑ± Îä•Î†•Ïù¥ ÌÉÅÏõî. ÏÉÅÏóÖÏ†Å ÏÑ±Í≥µÍ≥º ÏòàÏà†Ï†Å ÏôÑÏÑ±ÎèÑÎ•º ÎèôÏãúÏóê Ï∂îÍµ¨ÌïòÎäî Ïã§Ïö©Ï†Å ÏÑ±Í≤©."],
        "confidence": 0.75
      },
      "dimensions": {
        "A": 50, "C": 65, "E": 55, "F": 60, "L": 35, "M": 70, "R": 55, "S": 65
      },
      "primary_types": [
        {"type": "SAMF", "weight": 0.5},
        {"type": "SAMC", "weight": 0.5}
      ]
    },
    
    "Attributed to the Milan Marsyas Painter": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["ÎßàÏ°∏Î¶¨Ïπ¥", "Ïã†ÌôîÏ†Å", "Î∞ÄÎùºÎÖ∏", "ÎèÑÍ∏∞"],
        "reasoning": ["Ïã†ÌôîÏôÄ Í≥†Ï†ÑÏóê ÍπäÏù¥ Îß§Î£åÎêú ÏÉÅÏÉÅÎ†• ÌíçÎ∂ÄÌïú Ïû•Ïù∏. Ïù¥ÏïºÍ∏∞Ïùò Í∑πÏ†Å ÏàúÍ∞ÑÏùÑ Ìè¨Ï∞©ÌïòÎäî Îä•Î†•Ïù¥ Îõ∞Ïñ¥ÎÇòÎ©∞, Ï†ÑÌÜµ Í≥µÏòà Í∏∞Î≤ïÏóê ÏÉàÎ°úÏö¥ Ìï¥ÏÑùÏùÑ ÎçîÌïòÎäî Ï∞ΩÏùòÏ†Å ÏÑ±Í≤©."],
        "confidence": 0.7
      },
      "dimensions": {
        "A": 40, "C": 60, "E": 50, "F": 70, "L": 40, "M": 75, "R": 50, "S": 55
      },
      "primary_types": [
        {"type": "SAMF", "weight": 0.6},
        {"type": "LAMC", "weight": 0.4}
      ]
    },
    
    "George Jakob Hunzinger": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["Í∞ÄÍµ¨ÎîîÏûêÏù∏", "ÌòÅÏã†", "ÌäπÌóà", "Í∏∞Îä•ÏÑ±"],
        "reasoning": ["Ïã§Ïö©ÏÑ±Í≥º ÌòÅÏã†ÏùÑ Ï∂îÍµ¨ÌïòÎäî Î∞úÎ™ÖÍ∞Ä Ï†ïÏã†. Ï†ÑÌÜµÏ†Å Í∞ÄÍµ¨ Ï†úÏûëÏóê Í∏∞Í≥ÑÏ†Å ÏÇ¨Í≥†ÏôÄ ÌäπÌóà ÏãúÏä§ÌÖúÏùÑ ÎèÑÏûÖÌïú Í∑ºÎåÄÏ†Å ÏÇ¨ÏóÖÍ∞Ä. Í∏∞Îä•ÏÑ±Í≥º ÎØ∏Ï†Å Í∞ÄÏπòÎ•º ÎèôÏãúÏóê Ï∂îÍµ¨ÌïòÎäî Í∑†ÌòïÏû°Ìûå ÏÑ±Í≤©."],
        "confidence": 0.8
      },
      "dimensions": {
        "A": 55, "C": 70, "E": 60, "F": 45, "L": 50, "M": 35, "R": 85, "S": 55
      },
      "primary_types": [
        {"type": "LREC", "weight": 0.6},
        {"type": "SREC", "weight": 0.4}
      ]
    },
    
    "Attributed to Nicholas Dixon": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["ÎØ∏ÎãàÏñ¥Ï≤ò", "Ï¥àÏÉÅÌôî", "Í∂ÅÏ†ï", "Ï†ïÎ∞ÄÌï®"],
        "reasoning": ["Í∑πÎèÑÏùò ÏßëÏ§ëÎ†•Í≥º ÏÑ¨ÏÑ∏Ìï®ÏùÑ Í∞ÄÏßÑ ÏôÑÎ≤ΩÏ£ºÏùòÏûê. ÏÇ¨ÌöåÏ†Å ÏßÄÏúÑÎ•º Ï§ëÏãúÌïòÎ©∞ Í∂åÏúÑÏóê ÎåÄÌïú Ï°¥Ï§ëÏù¥ ÍπäÏùå. ÏûëÏùÄ ÌôîÎ©¥ÏóêÏÑú ÏµúÎåÄÌïúÏùò ÌëúÌòÑÎ†•ÏùÑ ÎÅåÏñ¥ÎÇ¥Îäî Í∏∞Ïà†Ï†Å ÏàôÎ†®ÎèÑÏôÄ Ïù∏ÎÇ¥Ïã¨Ïù¥ ÌäπÏßï."],
        "confidence": 0.8
      },
      "dimensions": {
        "A": 30, "C": 85, "E": 35, "F": 45, "L": 35, "M": 70, "R": 75, "S": 60
      },
      "primary_types": [
        {"type": "SRMC", "weight": 0.7},
        {"type": "LRMC", "weight": 0.3}
      ]
    },
    
    "Follower of Rembrandt van Rijn": {
      "meta": {
        "source": "comprehensive_analysis_batch2",
        "keywords": ["ÌÇ§ÏïÑÎ°úÏä§Ïø†Î°ú", "Î™®Î∞©", "Î∞îÎ°úÌÅ¨", "Í∑πÎ™ÖÌï®"],
        "reasoning": ["ÍπäÏùÄ Í¥ÄÏ∞∞Î†•Í≥º Ïã¨Î¶¨Ï†Å ÌÜµÏ∞∞Î†•ÏùÑ Í∞ÄÏßÑ ÏßÑÏßÄÌïú ÏÑ±Í≤©. Ïù∏Í∞Ñ ÎÇ¥Î©¥Ïùò Î≥µÏû°ÏÑ±Ïóê Í¥ÄÏã¨Ïù¥ ÎßéÏúºÎ©∞, Í∑πÏ†Å ÎåÄÎπÑÎ•º ÌÜµÌï¥ ÏßÑÏã§ÏùÑ ÎìúÎü¨ÎÇ¥Í≥†Ïûê ÌïòÎäî Ï≤†ÌïôÏ†Å ÏÇ¨Í≥†Î•º ÏßÄÎãò. Ï†ÑÌÜµ Í≥ÑÏäπÏóê Ï∂©Ïã§ÌïòÎ©¥ÏÑúÎèÑ Í∞úÏù∏Ï†Å Ìï¥ÏÑùÏùÑ Ï∂îÍµ¨."],
        "confidence": 0.85
      },
      "dimensions": {
        "A": 65, "C": 60, "E": 55, "F": 70, "L": 70, "M": 50, "R": 45, "S": 40
      },
      "primary_types": [
        {"type": "LAEF", "weight": 0.5},
        {"type": "LAMC", "weight": 0.5}
      ]
    }
  };

  let successCount = 0;
  let errorCount = 0;

  // Apply fixes
  for (const [artistName, aptProfile] of Object.entries(fixedProfiles)) {
    try {
      const result = await pool.query(`
        UPDATE artists 
        SET apt_profile = $1, updated_at = NOW()
        WHERE name = $2
        RETURNING name
      `, [JSON.stringify(aptProfile), artistName]);
      
      if (result.rows.length > 0) {
        console.log(`‚úÖ Updated APT profile for: ${artistName}`);
        successCount++;
      } else {
        console.log(`‚ö†Ô∏è  Artist not found: ${artistName}`);
      }
    } catch (error) {
      console.log(`‚ùå Error updating ${artistName}: ${error.message}`);
      errorCount++;
    }
  }

  console.log(`\nüìä APT Profile Update Summary:`);
  console.log(`Successfully updated: ${successCount} artists`);
  console.log(`Errors: ${errorCount} artists`);
  console.log(`Total processed: ${Object.keys(fixedProfiles).length} artists`);

  await pool.end();
}

fixAPTProfiles().catch(console.error);