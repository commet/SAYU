const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// Ï†ïÍµêÌïú ÏïÑÌã∞Ïä§Ìä∏ APT ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
const ARTIST_APT_PROFILES = {
  // ÌõÑÍ∏∞ Ïù∏ÏÉÅÌåå / ÌëúÌòÑÏ£ºÏùò
  'van gogh': {
    dimensions: { L: 85, S: 15, A: 90, R: 10, E: 95, M: 5, F: 80, C: 20 },
    types: [{ type: 'LAEF', weight: 0.8 }, { type: 'LAEC', weight: 0.2 }],
    keywords: ['Í≥†ÎèÖ', 'Ïó¥Ï†ï', 'Í∞êÏ†ïÌè≠Î∞ú', 'ÏÉâÏ±ÑÎßàÏà†ÏÇ¨'],
    reasoning: 'Í∑πÎèÑÎ°ú Í∞úÏù∏Ï†ÅÏù¥Í≥† Í∞êÏ†ïÏ†ÅÏù∏ ÏòàÏà† ÏÑ∏Í≥Ñ, ÏûêÏú†Î°úÏö¥ Î∂ìÌÑ∞ÏπòÎ°ú ÎÇ¥Î©¥ ÌëúÌòÑ',
    confidence: 0.95
  },
  
  'picasso': {
    dimensions: { L: 25, S: 75, A: 85, R: 15, E: 40, M: 60, F: 70, C: 30 },
    types: [{ type: 'SAMF', weight: 0.6 }, { type: 'SAEF', weight: 0.3 }, { type: 'SAMC', weight: 0.1 }],
    keywords: ['ÌòÅÏã†', 'ÏÇ¨ÍµêÏ†Å', 'Îã§Ïûë', 'Ïã§ÌóòÏ†ïÏã†'],
    reasoning: 'Îß§Ïö∞ ÏÇ¨ÍµêÏ†ÅÏù¥Î©∞ ÏßÄÏÜçÏ†ÅÏù∏ Ïä§ÌÉÄÏùº ÌòÅÏã†, Í∞úÎÖêÏ†Å Ï†ëÍ∑º',
    confidence: 0.95
  },
  
  'monet': {
    dimensions: { L: 60, S: 40, A: 85, R: 15, E: 75, M: 25, F: 90, C: 10 },
    types: [{ type: 'LAEF', weight: 0.7 }, { type: 'SAEF', weight: 0.3 }],
    keywords: ['Îπõ', 'ÏàúÍ∞ÑÌè¨Ï∞©', 'ÏûêÏó∞Ï£ºÏùò', 'Í∞êÏÑ±'],
    reasoning: 'ÎπõÍ≥º ÏÉâÏ±ÑÏùò ÏàúÍ∞ÑÏ†Å Î≥ÄÌôîÎ•º Í∞êÏÑ±Ï†ÅÏúºÎ°ú Ìè¨Ï∞©ÌïòÎäî ÏûêÏú†Î°úÏö¥ Ïä§ÌÉÄÏùº',
    confidence: 0.9
  },
  
  'leonardo': {
    dimensions: { L: 70, S: 30, A: 30, R: 70, E: 20, M: 80, F: 15, C: 85 },
    types: [{ type: 'LRMC', weight: 0.8 }, { type: 'LRMF', weight: 0.2 }],
    keywords: ['Í≥ºÌïô', 'ÏôÑÎ≤ΩÏ£ºÏùò', 'Ìï¥Î∂ÄÌïô', 'Ï≤¥Í≥ÑÏ†Å'],
    reasoning: 'Í≥ºÌïôÏ†Å Í¥ÄÏ∞∞Í≥º Ï≤¥Í≥ÑÏ†Å Ïó∞Íµ¨Ïóê Í∏∞Î∞òÌïú Ï†ïÎ∞ÄÌïú ÏòàÏà†',
    confidence: 0.95
  },
  
  'michelangelo': {
    dimensions: { L: 75, S: 25, A: 20, R: 80, E: 30, M: 70, F: 25, C: 75 },
    types: [{ type: 'LRMC', weight: 0.7 }, { type: 'LREC', weight: 0.3 }],
    keywords: ['Ï°∞Í∞ÅÏ†Å', 'ÏòÅÏõÖÏ†Å', 'Í≥†ÎèÖÌïúÏ≤úÏû¨', 'ÏôÑÎ≤ΩÏ∂îÍµ¨'],
    reasoning: 'Í≥†ÎèÖÌïú ÏôÑÎ≤ΩÏ£ºÏùòÏûê, Ïù∏Ï≤¥Ïùò Ïù¥ÏÉÅÏ†Å ÌëúÌòÑ Ï∂îÍµ¨',
    confidence: 0.9
  },
  
  'warhol': {
    dimensions: { L: 20, S: 80, A: 60, R: 40, E: 30, M: 70, F: 40, C: 60 },
    types: [{ type: 'SAMC', weight: 0.7 }, { type: 'SAMF', weight: 0.3 }],
    keywords: ['ÌåùÏïÑÌä∏', 'ÎåÄÏ§ëÎ¨∏Ìôî', 'ÏÉÅÏóÖÏ†Å', 'Î∞òÎ≥µ'],
    reasoning: 'ÎåÄÏ§ëÎ¨∏ÌôîÏôÄ ÏÉÅÏóÖ ÏòàÏà†Ïùò ÏùòÎØ∏Î•º ÌÉêÍµ¨ÌïòÎäî ÏÇ¨ÌöåÏ†Å ÏïÑÌã∞Ïä§Ìä∏',
    confidence: 0.85
  },
  
  'rothko': {
    dimensions: { L: 80, S: 20, A: 95, R: 5, E: 90, M: 10, F: 85, C: 15 },
    types: [{ type: 'LAEF', weight: 0.9 }, { type: 'LAEC', weight: 0.1 }],
    keywords: ['Î™ÖÏÉÅÏ†Å', 'ÏÉâÎ©¥', 'ÏòÅÏÑ±', 'ÏàúÏàòÍ∞êÏ†ï'],
    reasoning: 'ÏàúÏàòÌïú ÏÉâÏ±ÑÎ•º ÌÜµÌïú ÍπäÏùÄ ÏòÅÏ†Å Í≤ΩÌóò Ï∂îÍµ¨',
    confidence: 0.95
  },
  
  'pollock': {
    dimensions: { L: 70, S: 30, A: 95, R: 5, E: 85, M: 15, F: 95, C: 5 },
    types: [{ type: 'LAEF', weight: 0.8 }, { type: 'LAMF', weight: 0.2 }],
    keywords: ['Ïï°ÏÖòÌéòÏù∏ÌåÖ', 'Î¨¥ÏùòÏãù', 'ÏûêÎèôÍ∏∞Î≤ï', 'Ïó≠ÎèôÏÑ±'],
    reasoning: 'Î¨¥ÏùòÏãùÍ≥º Ïã†Ï≤¥ ÏõÄÏßÅÏûÑÏùò ÏûêÏú†Î°úÏö¥ ÌëúÌòÑ',
    confidence: 0.9
  },
  
  'basquiat': {
    dimensions: { L: 60, S: 40, A: 80, R: 20, E: 85, M: 15, F: 85, C: 15 },
    types: [{ type: 'LAEF', weight: 0.7 }, { type: 'SAEF', weight: 0.3 }],
    keywords: ['ÏõêÏãúÏÑ±', 'Í±∞Î¶¨ÏòàÏà†', 'Ï¶âÌù•ÏÑ±', 'ÏÇ¨ÌöåÎπÑÌåê'],
    reasoning: 'ÏõêÏãúÏ†Å ÏóêÎÑàÏßÄÏôÄ Ï¶âÌù•Ï†Å ÌëúÌòÑ, ÏÇ¨Ìöå ÌòÑÏã§Ïóê ÎåÄÌïú Í∞êÏ†ïÏ†Å Î∞òÏùë',
    confidence: 0.85
  },
  
  'banksy': {
    dimensions: { L: 85, S: 15, A: 70, R: 30, E: 40, M: 60, F: 60, C: 40 },
    types: [{ type: 'LAMF', weight: 0.6 }, { type: 'LAMC', weight: 0.4 }],
    keywords: ['ÏùµÎ™ÖÏÑ±', 'ÏÇ¨ÌöåÎπÑÌåê', 'Ï†ïÏπòÏ†Å', 'Í≤åÎ¶¥Îùº'],
    reasoning: 'ÏùµÎ™ÖÏÑ±ÏùÑ ÌÜµÌïú ÏÇ¨Ìöå ÎπÑÌåê, Í∞úÎÖêÏ†ÅÏù¥Î©¥ÏÑúÎèÑ Í∞êÍ∞ÅÏ†Å',
    confidence: 0.8
  },
  
  // ÌïúÍµ≠ ÏûëÍ∞ÄÎì§
  'Ïù¥Ï§ëÏÑ≠': {
    dimensions: { L: 85, S: 15, A: 75, R: 25, E: 95, M: 5, F: 80, C: 20 },
    types: [{ type: 'LAEF', weight: 0.8 }, { type: 'LAEC', weight: 0.2 }],
    keywords: ['Ìñ•Ïàò', 'Í∞ÄÏ°±ÏÇ¨Îûë', 'ÏÑúÏ†ïÏÑ±', 'ÎØºÏ°±Ìòº'],
    reasoning: 'Í∑πÎèÑÎ°ú Í∞úÏù∏Ï†ÅÏù¥Í≥† ÏÑúÏ†ïÏ†ÅÏù∏ Í∞êÏ†ï ÌëúÌòÑ, ÌïúÍµ≠Ï†Å Ï†ïÏÑú',
    confidence: 0.9
  },
  
  'Î∞ïÏàòÍ∑º': {
    dimensions: { L: 70, S: 30, A: 40, R: 60, E: 80, M: 20, F: 60, C: 40 },
    types: [{ type: 'LREC', weight: 0.6 }, { type: 'LREF', weight: 0.4 }],
    keywords: ['ÏÑúÎØºÏ†Å', 'ÏÜåÎ∞ïÌï®', 'ÌÜ†ÏÜçÏÑ±', 'Ïù∏Í∞ÑÎØ∏'],
    reasoning: 'ÏÑúÎØºÏùò ÏÇ∂ÏùÑ Îî∞ÎúªÌïú ÏãúÏÑ†ÏúºÎ°ú Í∑∏Î¶∞ ÏÑúÏ†ïÏ†Å Î¶¨ÏñºÎ¶¨Ï¶ò',
    confidence: 0.85
  },
  
  'ÍπÄÌôòÍ∏∞': {
    dimensions: { L: 65, S: 35, A: 85, R: 15, E: 75, M: 25, F: 80, C: 20 },
    types: [{ type: 'LAEF', weight: 0.7 }, { type: 'LAEC', weight: 0.3 }],
    keywords: ['ÏÑúÏ†ïÏ∂îÏÉÅ', 'Îã¨Ìï≠ÏïÑÎ¶¨', 'Ï†êÌôî', 'Ï†ïÏã†ÏÑ±'],
    reasoning: 'ÌïúÍµ≠Ï†Å Ï†ïÏÑúÎ•º Ï∂îÏÉÅÌôîÌïú ÏÑúÏ†ïÏ†Å ÌëúÌòÑ',
    confidence: 0.85
  }
};

// Ïä§ÌÉÄÏùº/Ïö¥ÎèôÎ≥Ñ APT Í≤ΩÌñ•
const ART_MOVEMENT_TENDENCIES = {
  'Impressionism': { A: +20, E: +15, F: +20 },
  'Expressionism': { L: +15, A: +25, E: +30, F: +15 },
  'Cubism': { A: +30, M: +20, C: +10 },
  'Surrealism': { A: +35, E: +20, F: +25 },
  'Abstract Expressionism': { L: +20, A: +40, E: +25, F: +30 },
  'Pop Art': { S: +25, M: +15, C: +10 },
  'Minimalism': { L: +20, M: +25, C: +30 },
  'Renaissance': { R: +30, M: +20, C: +25 },
  'Baroque': { R: +20, E: +15, C: +20 },
  'Romanticism': { E: +30, F: +20 },
  'Realism': { R: +35, M: +10, C: +15 }
};

// Íµ≠Í∞Ä/Î¨∏ÌôîÎ≥Ñ APT Í≤ΩÌñ•  
const CULTURAL_TENDENCIES = {
  'Korean': { L: +15, E: +20, F: +10 },
  'Japanese': { L: +20, A: +15, C: +15 },
  'Chinese': { M: +15, C: +20 },
  'French': { A: +15, E: +10, F: +15 },
  'German': { M: +20, C: +20 },
  'Italian': { E: +15, R: +10 },
  'American': { S: +10, F: +15 },
  'British': { M: +10, C: +10 },
  'Russian': { E: +20, A: +10 }
};

async function improvedArtistAPTAnalysis() {
  try {
    console.log('üé® Í∞úÏÑ†Îêú ÏïÑÌã∞Ïä§Ìä∏ APT Î∂ÑÏÑù ÏãúÏûë\n');
    
    // 1. ÌïµÏã¨ Ïú†Î™Ö ÏûëÍ∞ÄÎì§ ÏÑ†Î≥Ñ (Ï§ëÎ≥µ/Î™®Î∞©Ïûë Ï†úÏô∏)
    const coreArtists = await pool.query(`
      SELECT 
        id, name, name_ko, nationality, nationality_ko,
        birth_year, death_year, copyright_status, era, bio, bio_ko
      FROM artists 
      WHERE 
        -- Î©îÏù∏ ÏûëÍ∞ÄÎßå (after, attributed, imitator Ï†úÏô∏)
        name NOT ILIKE '%after %' 
        AND name NOT ILIKE '%attributed%'
        AND name NOT ILIKE '%imitator%'
        AND name NOT ILIKE '%workshop%'
        AND name NOT ILIKE '%circle of%'
        AND name NOT ILIKE '%school of%'
        -- Ïú†Î™Ö ÏûëÍ∞Ä ÌÇ§ÏõåÎìú Îß§Ïπ≠
        AND (
          name ILIKE '%van gogh%' OR name_ko ILIKE '%Í≥†Ìùê%' OR
          name ILIKE '%picasso%' OR name_ko ILIKE '%ÌîºÏπ¥ÏÜå%' OR
          name ILIKE '%monet%' OR name_ko ILIKE '%Î™®ÎÑ§%' OR
          name ILIKE '%leonardo%' OR name_ko ILIKE '%Îã§ÎπàÏπò%' OR
          name ILIKE '%michelangelo%' OR name_ko ILIKE '%ÎØ∏ÏºàÎûÄÏ†§Î°ú%' OR
          name ILIKE '%warhol%' OR name_ko ILIKE '%ÏõåÌôÄ%' OR
          name ILIKE '%rothko%' OR name_ko ILIKE '%Î°úÏä§ÏΩî%' OR
          name ILIKE '%pollock%' OR name_ko ILIKE '%Ìè¥Î°ù%' OR
          name ILIKE '%basquiat%' OR name_ko ILIKE '%Î∞îÏä§ÌÇ§ÏïÑ%' OR
          name ILIKE '%banksy%' OR name_ko ILIKE '%Î±ÖÌÅ¨Ïãú%' OR
          name ILIKE '%Ïù¥Ï§ëÏÑ≠%' OR
          name ILIKE '%Î∞ïÏàòÍ∑º%' OR  
          name ILIKE '%ÍπÄÌôòÍ∏∞%' OR
          name ILIKE '%renoir%' OR name_ko ILIKE '%Î•¥ÎàÑÏïÑÎ•¥%' OR
          name ILIKE '%degas%' OR name_ko ILIKE '%ÎìúÍ∞Ä%' OR
          name ILIKE '%cezanne%' OR name_ko ILIKE '%ÏÑ∏Ïûî%' OR
          name ILIKE '%matisse%' OR name_ko ILIKE '%ÎßàÌã∞Ïä§%' OR
          name ILIKE '%kandinsky%' OR name_ko ILIKE '%Ïπ∏ÎîòÏä§ÌÇ§%'
        )
      ORDER BY 
        CASE 
          WHEN name ILIKE '%van gogh%' OR name_ko ILIKE '%Í≥†Ìùê%' THEN 1
          WHEN name ILIKE '%picasso%' OR name_ko ILIKE '%ÌîºÏπ¥ÏÜå%' THEN 2  
          WHEN name ILIKE '%monet%' OR name_ko ILIKE '%Î™®ÎÑ§%' THEN 3
          WHEN name ILIKE '%leonardo%' OR name_ko ILIKE '%Îã§ÎπàÏπò%' THEN 4
          WHEN name ILIKE '%Ïù¥Ï§ëÏÑ≠%' THEN 5
          ELSE 10
        END
      LIMIT 50
    `);
    
    console.log(`‚úÖ ${coreArtists.rows.length}Î™ÖÏùò ÌïµÏã¨ ÏûëÍ∞Ä ÏÑ†Î≥Ñ\n`);
    
    // 2. Í∞Å ÏûëÍ∞Ä APT Î∂ÑÏÑù
    const analysisResults = [];
    
    for (const artist of coreArtists.rows) {
      const aptProfile = analyzeArtistAPTImproved(artist);
      
      analysisResults.push({
        artist_id: artist.id,
        name: artist.name || artist.name_ko,
        nationality: artist.nationality || artist.nationality_ko,
        era: artist.era,
        years: `${artist.birth_year || '?'} - ${artist.death_year || 'present'}`,
        apt_profile: aptProfile
      });
      
      console.log(`‚úÖ ${artist.name || artist.name_ko}: ${aptProfile.primary_types[0].type} (${Math.round(aptProfile.meta.confidence * 100)}% Ïã†Î¢∞ÎèÑ)`);
    }
    
    // 3. Í≤∞Í≥º Î∂ÑÏÑù Î∞è Ï†ÄÏû•
    console.log('\nüìä APT Î∂ÑÌè¨ Î∂ÑÏÑù:');
    console.log('=================');
    
    const typeDistribution = {};
    analysisResults.forEach(result => {
      const type = result.apt_profile.primary_types[0].type;
      typeDistribution[type] = (typeDistribution[type] || 0) + 1;
    });
    
    Object.entries(typeDistribution)
      .sort(([,a], [,b]) => b - a)
      .forEach(([type, count]) => {
        console.log(`${type}: ${count}Î™Ö`);
      });
    
    // 4. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÅÏö© Ï§ÄÎπÑ
    const dbInsertData = analysisResults.map(result => ({
      artist_id: result.artist_id,
      apt_profile: JSON.stringify(result.apt_profile),
      mapping_method: 'expert_analysis_v2',
      confidence_score: result.apt_profile.meta.confidence,
      mapped_by: 'sayu_apt_analyzer_v2',
      mapping_notes: `Analyzed: ${result.apt_profile.meta.reasoning.join('; ')}`
    }));
    
    // 5. ÏÉÅÏÑ∏ Í≤∞Í≥º Ï†ÄÏû•
    require('fs').writeFileSync(
      'improved-artist-apt-results.json',
      JSON.stringify(analysisResults, null, 2)
    );
    
    require('fs').writeFileSync(
      'apt-db-insert-data.json',
      JSON.stringify(dbInsertData, null, 2)
    );
    
    console.log('\nüíæ Í≤∞Í≥º Ï†ÄÏû• ÏôÑÎ£å:');
    console.log('- improved-artist-apt-results.json: ÏÉÅÏÑ∏ Î∂ÑÏÑù Í≤∞Í≥º');
    console.log('- apt-db-insert-data.json: DB ÏÇΩÏûÖÏö© Îç∞Ïù¥ÌÑ∞');
    
    return analysisResults;
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error.message);
  } finally {
    await pool.end();
  }
}

function analyzeArtistAPTImproved(artist) {
  const name = (artist.name || artist.name_ko || '').toLowerCase();
  const nationality = artist.nationality || artist.nationality_ko || '';
  const era = artist.era || '';
  
  // 1. ÌîÑÎ¶¨ÏÖã ÌîÑÎ°úÌïÑ ÌôïÏù∏
  for (const [key, profile] of Object.entries(ARTIST_APT_PROFILES)) {
    if (name.includes(key)) {
      return {
        dimensions: profile.dimensions,
        primary_types: profile.types,
        meta: {
          confidence: profile.confidence,
          source: 'expert_preset',
          keywords: profile.keywords,
          reasoning: [profile.reasoning]
        }
      };
    }
  }
  
  // 2. Í∑úÏπô Í∏∞Î∞ò Î∂ÑÏÑù (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)
  let dimensions = { L: 50, S: 50, A: 50, R: 50, E: 50, M: 50, F: 50, C: 50 };
  let reasoning = [];
  let confidence = 0.6; // Í∏∞Î≥∏ Ïã†Î¢∞ÎèÑ
  
  // ÏãúÎåÄÎ≥Ñ Í≤ΩÌñ• Ï†ÅÏö©
  if (era && ART_MOVEMENT_TENDENCIES[era]) {
    const tendency = ART_MOVEMENT_TENDENCIES[era];
    Object.entries(tendency).forEach(([dim, adj]) => {
      dimensions[dim] += adj;
    });
    reasoning.push(`${era} ÌôîÌíçÏùò ÌäπÏÑ± Î∞òÏòÅ`);
    confidence += 0.1;
  }
  
  // Î¨∏Ìôî/Íµ≠Ï†ÅÎ≥Ñ Í≤ΩÌñ• Ï†ÅÏö©
  for (const [culture, tendency] of Object.entries(CULTURAL_TENDENCIES)) {
    if (nationality.includes(culture)) {
      Object.entries(tendency).forEach(([dim, adj]) => {
        dimensions[dim] += adj;
      });
      reasoning.push(`${culture} Î¨∏ÌôîÍ∂åÏùò ÏòàÏà† ÌäπÏÑ± Î∞òÏòÅ`);
      confidence += 0.1;
      break;
    }
  }
  
  // ÏãúÎåÄÎ≥Ñ Ï∂îÍ∞Ä Ï°∞Ï†ï
  if (artist.birth_year) {
    if (artist.birth_year < 1500) { // Ï§ëÏÑ∏/Î•¥ÎÑ§ÏÉÅÏä§
      dimensions.R += 25; dimensions.A -= 25;
      dimensions.M += 15; dimensions.E -= 15;
      dimensions.C += 20; dimensions.F -= 20;
      reasoning.push('Í≥†Ï†ÑÏ£ºÏùò Ï†ÑÌÜµ - ÏÇ¨Ïã§Ï†Å, Ï≤¥Í≥ÑÏ†Å Ï†ëÍ∑º');
    } else if (artist.birth_year > 1900) { // ÌòÑÎåÄ
      dimensions.A += 20; dimensions.R -= 20;
      dimensions.S += 10; dimensions.L -= 10;
      reasoning.push('ÌòÑÎåÄ ÏòàÏà† - Ï∂îÏÉÅÏ†Å, Ïã§ÌóòÏ†Å ÏÑ±Ìñ•');
    }
  }
  
  // Ï†êÏàò Ï†ïÍ∑úÌôî Î∞è Í≤ΩÍ≥ÑÍ∞í Ï°∞Ï†ï
  Object.keys(dimensions).forEach(dim => {
    dimensions[dim] = Math.max(5, Math.min(95, dimensions[dim]));
  });
  
  // ÎåÄÎ¶Ω Ï∞®Ïõê Ìï©Í≥Ñ ÎßûÏ∂îÍ∏∞
  dimensions.S = 100 - dimensions.L;
  dimensions.R = 100 - dimensions.A; 
  dimensions.M = 100 - dimensions.E;
  dimensions.C = 100 - dimensions.F;
  
  // Ï£ºÏöî ÌÉÄÏûÖÎì§ Í≥ÑÏÇ∞
  const primaryType = 
    (dimensions.L > dimensions.S ? 'L' : 'S') +
    (dimensions.A > dimensions.R ? 'A' : 'R') +
    (dimensions.E > dimensions.M ? 'E' : 'M') +
    (dimensions.F > dimensions.C ? 'F' : 'C');
  
  // Î≥¥Ï°∞ ÌÉÄÏûÖÎì§ Í≥ÑÏÇ∞ (Ï∞®Ïù¥Í∞Ä Ï†ÅÏùÄ Ï∞®ÏõêÎì§Î°ú)
  const secondaryTypes = [];
  const axes = [
    { primary: 'L', secondary: 'S', score: Math.abs(dimensions.L - dimensions.S) },
    { primary: 'A', secondary: 'R', score: Math.abs(dimensions.A - dimensions.R) },
    { primary: 'E', secondary: 'M', score: Math.abs(dimensions.E - dimensions.M) },
    { primary: 'F', secondary: 'C', score: Math.abs(dimensions.F - dimensions.C) }
  ];
  
  // Ïï†Îß§Ìïú Ï∞®ÏõêÏù¥ ÏûàÏúºÎ©¥ Î≥¥Ï°∞ ÌÉÄÏûÖ ÏÉùÏÑ±
  const ambiguousAxes = axes.filter(axis => axis.score < 30);
  if (ambiguousAxes.length > 0) {
    // Í∞ÄÏû• Ïï†Îß§Ìïú Ï∞®ÏõêÏùÑ Îí§ÏßëÏñ¥ÏÑú Î≥¥Ï°∞ ÌÉÄÏûÖ ÏÉùÏÑ±
    const mostAmbiguous = ambiguousAxes.sort((a, b) => a.score - b.score)[0];
    let secondaryType = primaryType;
    
    if (mostAmbiguous.primary === 'L') {
      secondaryType = secondaryType.replace('L', 'S').replace('S', 'L');
    } else if (mostAmbiguous.primary === 'A') {
      secondaryType = secondaryType.replace('A', 'R').replace('R', 'A');
    } else if (mostAmbiguous.primary === 'E') {
      secondaryType = secondaryType.replace('E', 'M').replace('M', 'E');
    } else if (mostAmbiguous.primary === 'F') {
      secondaryType = secondaryType.replace('F', 'C').replace('C', 'F');
    }
    
    secondaryTypes.push({ type: secondaryType, weight: 0.3 });
  }
  
  return {
    dimensions,
    primary_types: [
      { type: primaryType, weight: 0.7 },
      ...secondaryTypes
    ],
    meta: {
      confidence: Math.min(0.95, confidence),
      source: 'rule_based_analysis_v2',
      keywords: [era, nationality, `${artist.birth_year}ÎÖÑÎåÄ`].filter(Boolean),
      reasoning
    }
  };
}

improvedArtistAPTAnalysis();