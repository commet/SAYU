const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// Analyze the pattern: SAMC, SAMF, LAEF, LAMF, LRMC, LREC, LAEC, SAEF
// Seems to be combinations of high-scoring dimensions
// S=Social, A=Agreeableness, M=Materialism, C=Creativity, F=Flexibility, L=Leadership, R=Rationality, E=Emotionality

function generateAptTypeCode(dimensions) {
  // Get the 4 highest scoring dimensions
  const sortedDims = Object.entries(dimensions)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 4)
    .map(([key]) => key);
  
  return sortedDims.join('');
}

async function updateArtistsWithProperCodes() {
  try {
    console.log('üé® Generating proper APT type codes for artists 5-10...\n');
    
    const artists = [
      {
        name: 'Andreas Gursky',
        dimensions: { A: 50, C: 80, E: 40, F: 60, L: 70, M: 80, R: 90, S: 60 },
        keywords: ["Î∂ÑÏÑùÏ†Å", "ÏôÑÎ≤ΩÏ£ºÏùò", "Ï≤¥Í≥ÑÏ†Å", "Í¥ÄÏ∞∞"],
        reasoning: ["ÎåÄÍ∑úÎ™® ÏÇ¨ÏßÑÏûëÏóÖÏùÑ ÌÜµÌïú ÌòÑÎåÄ ÏûêÎ≥∏Ï£ºÏùò Í¥ÄÏ∞∞Í≥º Î∂ÑÏÑùÏ†Å Ï†ëÍ∑º"]
      },
      {
        name: 'Cindy Sherman', 
        dimensions: { A: 60, C: 90, E: 80, F: 90, L: 80, M: 70, R: 70, S: 77 },
        keywords: ["Î≥ÄÌôî", "Ïã¨Î¶¨ÌÉêÍµ¨", "Ï†ïÏ≤¥ÏÑ±", "Î≥ÄÏã†"],
        reasoning: ["40ÎÖÑÍ∞Ñ Îã§ÏñëÌïú ÌéòÎ•¥ÏÜåÎÇòÎ•º ÌÜµÌïú Ï†ïÏ≤¥ÏÑ±Í≥º ÏÇ¨ÌöåÎπÑÌåêÏ†Å ÌÉêÍµ¨"]
      },
      {
        name: 'Anselm Kiefer',
        dimensions: { A: 50, C: 90, E: 90, F: 60, L: 80, M: 90, R: 70, S: 63 },
        keywords: ["Ïã†ÌôîÏ†Å", "Ïó≠ÏÇ¨ÏùòÏãù", "Î¨ºÏßàÏã§Ìóò", "Ï≤†ÌïôÏ†Å"],
        reasoning: ["ÎèÖÏùº Ïó≠ÏÇ¨ÏôÄ Ïã†ÌôîÎ•º Í±∞ÎåÄÌïú Ïä§ÏºÄÏùºÍ≥º Î¨ºÏßà Ïã§ÌóòÏúºÎ°ú ÌÉêÍµ¨"]
      },
      {
        name: 'Yinka Shonibare',
        dimensions: { A: 90, C: 80, E: 70, F: 80, L: 80, M: 80, R: 70, S: 83 },
        keywords: ["Î¨∏ÌôîÏúµÌï©", "ÏÇ¨ÌöåÏùòÏãù", "Ïú†Î®∏", "Ìè¨Ïö©ÏÑ±"],
        reasoning: ["Î¨∏ÌôîÍ∞Ñ Í≤ΩÍ≥ÑÎ•º ÎÑòÎÇòÎìúÎäî ÌòëÎ†•Ï†ÅÏù¥Í≥† Ìè¨Ïö©Ï†ÅÏù∏ ÏòàÏà† Ïã§Ï≤ú"]
      },
      {
        name: 'Kerry James Marshall',
        dimensions: { A: 80, C: 80, E: 70, F: 60, L: 80, M: 60, R: 80, S: 73 },
        keywords: ["Ïó≠ÏÇ¨ÏùòÏãù", "ÎåÄÌëúÏÑ±", "ÍµêÏú°Ï†Å", "Ï≤¥Í≥ÑÏ†Å"],
        reasoning: ["ÌùëÏù∏Ïùò Ï°¥Ïû¨Í∞êÏùÑ ÌöåÌôîÏÇ¨Ïóê Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Î≥µÏõêÌïòÎäî ÍµêÏú°Ï†Å Î¶¨ÎçîÏã≠"]
      },
      {
        name: 'Kehinde Wiley',
        dimensions: { A: 70, C: 90, E: 80, F: 80, L: 90, M: 90, R: 70, S: 80 },
        keywords: ["Ïπ¥Î¶¨Ïä§Îßà", "ÎåÄÎã¥Ìï®", "Í∏ÄÎ°úÎ≤å", "Ïû•ÏãùÏÑ±"],
        reasoning: ["Ï†ÑÌÜµ Ï¥àÏÉÅÌôîÏùò Ïû¨Ìï¥ÏÑùÏùÑ ÌÜµÌïú Î¨∏ÌôîÏ†Å Í∂åÎ†•Í≥º ÏïÑÎ¶ÑÎã§ÏõÄÏùò Ïû¨Ï†ïÏùò"]
      }
    ];
    
    for (const artist of artists) {
      // Generate primary and secondary type codes
      const sortedDims = Object.entries(artist.dimensions)
        .sort(([,a], [,b]) => b - a);
      
      const primaryType = sortedDims.slice(0, 4).map(([key]) => key).join('');
      const secondaryType = [sortedDims[0][0], sortedDims[1][0], sortedDims[2][0], sortedDims[4][0]].join('');
      
      console.log(`${artist.name}:`);
      console.log(`  Dimensions: ${Object.entries(artist.dimensions).map(([k,v]) => `${k}:${v}`).join(' ')}`);
      console.log(`  Primary type: ${primaryType}`);
      console.log(`  Secondary type: ${secondaryType}`);
      
      const profile = {
        meta: {
          source: "expert_preset",
          keywords: artist.keywords,
          reasoning: artist.reasoning,
          confidence: 0.85
        },
        dimensions: artist.dimensions,
        primary_types: [
          {
            type: primaryType,
            weight: 0.7
          },
          {
            type: secondaryType,
            weight: 0.3
          }
        ]
      };
      
      try {
        const result = await pool.query(`
          UPDATE artists 
          SET apt_profile = $1
          WHERE name = $2
          RETURNING name
        `, [JSON.stringify(profile), artist.name]);
        
        if (result.rows.length > 0) {
          console.log(`  ‚úÖ Updated successfully\n`);
        } else {
          console.log(`  ‚ùå Artist not found\n`);
        }
      } catch (error) {
        console.log(`  ‚ùå Update failed: ${error.message}\n`);
      }
    }
    
    // Verify the updates
    console.log('üîç Verifying updates...\n');
    
    for (const artist of artists) {
      try {
        const result = await pool.query(`
          SELECT name, apt_profile
          FROM artists 
          WHERE name = $1 AND apt_profile IS NOT NULL
        `, [artist.name]);
        
        if (result.rows.length > 0) {
          const profile = result.rows[0].apt_profile;
          console.log(`‚úÖ ${artist.name}: ${profile.primary_types[0].type} (${profile.meta.confidence})`);
        } else {
          console.log(`‚ùå ${artist.name}: No profile found`);
        }
      } catch (error) {
        console.log(`‚ùå ${artist.name}: Verification error`);
      }
    }
    
  } catch (error) {
    console.error('Main error:', error.message);
  } finally {
    await pool.end();
  }
}

updateArtistsWithProperCodes();