#!/usr/bin/env node
require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function addWebsiteUrlColumn() {
  console.log('üîß exhibitions ÌÖåÏù¥Î∏îÏóê website_url Ïª¨Îüº Ï∂îÍ∞Ä\n');
  
  const client = await pool.connect();
  
  try {
    // website_url Ïª¨ÎüºÏù¥ Ïù¥ÎØ∏ ÏûàÎäîÏßÄ ÌôïÏù∏
    const columnCheck = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'exhibitions' AND column_name = 'website_url'
    `);
    
    if (columnCheck.rows.length > 0) {
      console.log('‚ÑπÔ∏è  website_url Ïª¨ÎüºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.');
      return;
    }
    
    // website_url Ïª¨Îüº Ï∂îÍ∞Ä
    await client.query(`
      ALTER TABLE exhibitions 
      ADD COLUMN website_url TEXT
    `);
    
    console.log('‚úÖ website_url Ïª¨ÎüºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.');
    
    // ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
    const tableInfo = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'exhibitions' 
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìã exhibitions ÌÖåÏù¥Î∏î Íµ¨Ï°∞:');
    console.log('=' .repeat(60));
    tableInfo.rows.forEach(col => {
      console.log(`   ${col.column_name}: ${col.data_type} ${col.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
    });
    console.log('=' .repeat(60));
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error.message);
  } finally {
    client.release();
  }
}

// Ïã§Ìñâ
async function main() {
  await addWebsiteUrlColumn();
  await pool.end();
}

if (require.main === module) {
  main();
}

module.exports = { addWebsiteUrlColumn };